# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample150

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TopTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTopTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TopTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopTable
    def Struct1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from MySample.Sample150.Struct1 import Struct1
            obj = Struct1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TopTableStart(builder):
    builder.StartObject(1)

def Start(builder):
    TopTableStart(builder)

def TopTableAddStruct1(builder, struct1):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(struct1), 0)

def AddStruct1(builder, struct1):
    TopTableAddStruct1(builder, struct1)

def TopTableEnd(builder):
    return builder.EndObject()

def End(builder):
    return TopTableEnd(builder)
