# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample14

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TopTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTopTable(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def TopTableBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x59\x46\x49", size_prefixed=size_prefixed)

    # TopTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopTable
    def Ifielda(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TopTable
    def Ifieldb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def TopTableStart(builder): builder.StartObject(2)
def TopTableAddIfielda(builder, ifielda): builder.PrependInt32Slot(0, ifielda, 0)
def TopTableAddIfieldb(builder, ifieldb): builder.PrependInt32Slot(1, ifieldb, 0)
def TopTableEnd(builder): return builder.EndObject()
